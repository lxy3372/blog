<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Riky]]></title>
  <subtitle><![CDATA[Keep it simple.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.rikyliu.com/"/>
  <updated>2015-04-26T14:33:29.000Z</updated>
  <id>http://www.rikyliu.com/</id>
  
  <author>
    <name><![CDATA[Riky Liu]]></name>
    <email><![CDATA[me@rikyliu.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于MongoDB的PHP和Java版Geohash地理位置查询实现方案]]></title>
    <link href="http://www.rikyliu.com/java-mongodb-geohash/"/>
    <id>http://www.rikyliu.com/java-mongodb-geohash/</id>
    <published>2015-04-24T12:42:38.000Z</published>
    <updated>2015-04-26T14:33:29.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直在折腾附近的人功能的实现，有很多种实现方案。而且大部分都是基于 <a href="http://en.wikipedia.org/wiki/Geohash" target="_blank" rel="external">GeoHash</a> 算法实现的，也比较简单高效。</p>
<p>MongoDB中准备的数据如下（PHP插入）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"_id"</span>: ObjectId(<span class="string">"5507823742ad00f8148bfcf3"</span>),</span><br><span class="line">   <span class="string">"sex"</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="string">"nickName"</span> : <span class="string">"test"</span>,</span><br><span class="line">   <span class="string">"loc"</span>: [ <span class="comment">//localtion </span></span><br><span class="line">     <span class="number">114.068604</span>, <span class="comment">//longitude</span></span><br><span class="line">     <span class="number">22.531678</span>  <span class="comment">//latitude</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"latitude"</span>: <span class="number">22.531678</span>,</span><br><span class="line">   <span class="string">"longitude"</span>: <span class="number">114.068604</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>插入数据后需要建立对应的2d索引：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;<span class="string">"loc"</span>:<span class="string">"2d"</span>&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="PHP的实现方案">PHP的实现方案</h2><p>php做起来还是比较简单的，也不需要依赖框架什么的。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line">	<span class="comment">#code ...</span></span><br><span class="line">	<span class="variable">$condition</span> = <span class="keyword">array</span>();		</span><br><span class="line">	<span class="variable">$condition</span>[<span class="string">'loc'</span>] = <span class="keyword">array</span>(</span><br><span class="line">		<span class="string">'$near'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">       	    (double)<span class="variable">$longitude</span>,</span><br><span class="line">       	    (double)<span class="variable">$latitude</span></span><br><span class="line">       	),</span><br><span class="line">		<span class="string">'$maxDistance'</span> =&gt; <span class="variable">$radius</span>/<span class="number">111</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="variable">$condition</span>[<span class="string">'sex'</span>] = <span class="number">0</span>;<span class="comment">//男</span></span><br><span class="line">	<span class="variable">$condition</span>[<span class="string">'nickName'</span>] = <span class="keyword">new</span> MongoRegex(<span class="string">'/^'</span>.<span class="variable">$nickName</span>.<span class="string">'/'</span>);<span class="comment">//模糊搜索</span></span><br><span class="line">	<span class="variable">$result</span> = MongoHelper::getInstance-&gt;find(<span class="string">"database"</span>, <span class="string">"user"</span>, <span class="variable">$condition</span>);<span class="comment">//封装的MongoDB查询方法，MongoHelper中连接MongoDB</span></span><br><span class="line">	<span class="comment">#code ...</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Java的实现方案">Java的实现方案</h2><p>Java的实现方案也是类似的，因为我使用的是Spring 4.0，就采用Spring Data的方式进行的<br><a id="more"></a></p>
<ol>
<li>Gradle引入对应包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#build.gradle 中添加依赖</span><br><span class="line">compile (<span class="string">'org.springframework.boot:spring-boot-starter-data-mongodb:1.2.0.RELEASE'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Gradle刷新依赖，下载jar包</p>
<ol>
<li>配置MongoConfig.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MongoDbFactory <span class="title">mongoDbFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		MongoClient mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>;</span><br><span class="line">		UserCredentials userCredentials = <span class="keyword">new</span> UserCredentials(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SimpleMongoDbFactory(mongoClient, <span class="string">"user"</span><span class="comment">/*database*/</span>, userCredentials);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">mongoTemplate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		MongoTemplate mongoTemplate = <span class="keyword">new</span> MongoTemplate(mongoDbFactory());</span><br><span class="line">		<span class="keyword">return</span> mongoTemplate;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>并在Application.java中引入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="annotation">@ComponentScan</span></span><br><span class="line"><span class="annotation">@Import</span>(&#123;MongoConfig.class, BeanConfig.class, SecurityConfig.class&#125;)</span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span>(exclude = &#123;SecurityAutoConfiguration.class, ManagementSecurityAutoConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;</span><br><span class="line">	<span class="comment">//coding...</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>在使用时注入MongoTemlate</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Inject</span>  </span><br><span class="line"><span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code ...</span></span><br><span class="line"><span class="keyword">double</span>[] location = &#123;<span class="number">114.068604</span>, <span class="number">22.531678</span>&#125;;</span><br><span class="line"><span class="comment">//需要建立TestBo 对应的bean</span></span><br><span class="line">TestBo test = TestBo.builder()</span><br><span class="line">		.sex(<span class="number">0</span>)</span><br><span class="line">		.latitude(<span class="number">22.531678</span>)</span><br><span class="line">		.longitude(<span class="number">114.068604</span>)</span><br><span class="line">		.loc(location),</span><br><span class="line">		.nickName(<span class="string">"test"</span>),</span><br><span class="line">		.build();</span><br><span class="line">mongoTemplate.insert(userProfiles);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>需要注意的时，Java往MongoDB中插入的是一个类的数据结构，这与PHP简单的数据是有些区别的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"_id"</span>: ObjectId(<span class="string">"5507823742ad00f8148bfcf3"</span>),</span><br><span class="line">   <span class="string">"_class"</span> : <span class="string">"com.test.bo.TestBo"</span>,</span><br><span class="line">   <span class="string">"sex"</span> : <span class="number">0</span>,</span><br><span class="line">   <span class="string">"nickName"</span> : <span class="string">"test"</span>,</span><br><span class="line">   <span class="string">"loc"</span>: [ <span class="comment">//localtion </span></span><br><span class="line">     <span class="number">114.068604</span>, <span class="comment">//longitude</span></span><br><span class="line">     <span class="number">22.531678</span>  <span class="comment">//latitude</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"latitude"</span>: <span class="number">22.531678</span>,</span><br><span class="line">   <span class="string">"longitude"</span>: <span class="number">114.068604</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line">criteria.andOperator(Criteria.where(<span class="string">"sex"</span>).is(<span class="number">0</span>).and(<span class="string">"nickName"</span>).is(<span class="string">"test"</span>));<span class="comment">//普通查询条件</span></span><br><span class="line"></span><br><span class="line">Point point = <span class="keyword">new</span> Point(<span class="number">114.06</span>, <span class="number">22.53</span>);<span class="comment">//传入当前经纬度</span></span><br><span class="line">NearQuery  near = NearQuery.near(point).maxDistance(<span class="keyword">new</span> Distance(<span class="number">1000</span>,Metrics.KILOMETERS));<span class="comment">//经纬度范围查询，默认loc字段，需建2d索引</span></span><br><span class="line"></span><br><span class="line">Query queryCondition = <span class="keyword">new</span> Query(criteria);</span><br><span class="line">queryCondition.fields().exclude(<span class="string">"_id"</span>);<span class="comment">//排除字段</span></span><br><span class="line">queryCondition.skip(<span class="number">0</span>);<span class="comment">//起始页</span></span><br><span class="line">queryCondition.limit(<span class="number">10</span>);<span class="comment">//每页限制条数</span></span><br><span class="line"></span><br><span class="line">near.query(queryCondition);</span><br><span class="line"></span><br><span class="line">GeoResults&lt;TestBo&gt;  testList = mongoTemplate.geoNear(near, UserProfileBo.class);</span><br><span class="line"></span><br><span class="line">List&lt;GeoResult&lt;TestBo&gt;&gt; testList = tesetList.getContent();</span><br><span class="line"></span><br><span class="line">List&lt;TestBo&gt; tests= <span class="keyword">new</span> ArrayList&lt;TestBo&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( GeoResult&lt;TestBo&gt; geoTest : testList)&#123;</span><br><span class="line">	tests.add(geoTest.getContent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>这块有一个坑点：就是MongoDB的2D索引，在不同的版本中是有所区别的，因为Java的部分写法也有所不同（毕竟我也是Google来的）。具体可以参见<a href="http://docs.mongodb.org/v2.4/reference/operator/query/near/#op._S_near" target="_blank" rel="external">MongoDB:$near</a>的用法，中间提到了索引<code>2d</code>和<code>2dsphere</code>的一些区别。</p>
]]></content>
    <summary type="html">
    <![CDATA[基于MongoDB的PHP和Java版Geohash地理位置查询实现方案]]>
    
    </summary>
    
      <category term="GeoHash" scheme="http://www.rikyliu.com/tags/GeoHash/"/>
    
      <category term="Java" scheme="http://www.rikyliu.com/tags/Java/"/>
    
      <category term="MongoDB" scheme="http://www.rikyliu.com/tags/MongoDB/"/>
    
      <category term="MongoTemplate" scheme="http://www.rikyliu.com/tags/MongoTemplate/"/>
    
      <category term="PHP" scheme="http://www.rikyliu.com/tags/PHP/"/>
    
      <category term="Spring" scheme="http://www.rikyliu.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[客户端设置多个github账号]]></title>
    <link href="http://www.rikyliu.com/git-github-account/"/>
    <id>http://www.rikyliu.com/git-github-account/</id>
    <published>2015-04-22T14:33:31.000Z</published>
    <updated>2015-04-22T14:44:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于需要在自己的电脑上办公，需要远程连接公司的Gitblit。但本机已经简单的配置GitHub的一些账号信息。在两个账号切换的过程中会有些麻烦，于是Google下，有了以下的解决方案：</p>
<h4 id="（参考:_http://www-cnblogs-com/sosoft/p/3477578-html）">（参考: <a href="http://www.cnblogs.com/sosoft/p/3477578.html）" target="_blank" rel="external">http://www.cnblogs.com/sosoft/p/3477578.html）</a></h4><h3 id="步骤一：用ssh-keygen命令生成一组新的id_rsa_new和id_rsa_new-pub。">步骤一：用<code>ssh-keygen</code>命令生成一组新的id_rsa_new和id_rsa_new.pub。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#34;new email&#34;</span><br></pre></td></tr></table></figure>
<p>平时我们都是直接回车，默认生成id_rsa和id_rsa.pub。这里特别需要注意，出现提示输入文件名的时候要输入与默认配置不一样的文件名，比如： id_rsa_new。</p>
<h3 id="步骤二：配置~/-ssh/config文件，以我自己的机器为例。">步骤二：配置~/.ssh/config文件，以我自己的机器为例。</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#Default Git&#10;&#10;Host chdxy# &#27604;&#22914; chdxy&#10;&#10;HostName IP Address #&#19968;&#33324;&#37319;&#29992;&#23545;&#24212;&#22495;&#21517;&#21363;&#21487;  github.com&#10;&#10;User think #&#35813;&#29992;&#25143;&#20026;github&#36134;&#25143;&#29992;&#25143;&#21517;  &#22914;  CHDTEAM&#10;&#10;IdentityFile ~/.ssh/id_rsa&#10;&#10;#Second Git   &#21516;&#19978;&#37197;&#32622;&#37319;&#29992;&#19968;&#26679;&#30340;&#21363;&#21487;&#10;&#10;Host secondgit&#10;&#10;HostName IP Address #&#22495;&#21517;&#20063;&#21487;&#10;&#10;User think&#10;&#10;IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure>
<p>Host就是每个SSH连接的单独代号，IdentityFile告诉SSH连接去读取哪个私钥。</p>
<h3 id="步骤三：执行ssh-agent让ssh识别新的私钥。">步骤三：执行ssh-agent让ssh识别新的私钥。</h3><a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#22810;&#20010;&#36134;&#21495;&#30340;ssh-key &#37117;&#38656;&#35201;&#21152;&#36827;&#26469;&#10;&#10;#&#26368;&#22909;&#20808;&#27979;&#35797;&#19979;&#26159;&#21542;&#36830;&#25509;&#25104;&#21151;  ssh -T git@chdxy   &#65288;&#19968;&#33324;&#40664;&#35748;&#20026;git@github.com &#27492;&#22788;&#35774;&#32622;&#20102;Host&#65292;&#37319;&#29992;&#33258;&#24049;&#36134;&#21495;&#30340;Host&#21363;&#21487;&#65289;&#10;&#10;ssh-add ~/.ssh/id_rsa_new&#10;ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent，可执行ssh-agent bash命令后再执行ssh-add命令。<br>以后，在clone或者add remote的时候，需要把config文件中的host代替git@remoteaddress中的remoteaddress。</p>
<p>同时，你可以通过在特定的repo下执行下面的命令，生成区别于全局设置的user.name和user.email。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &#34;newname&#34;&#10;&#10;git config user.email &#34;newemail&#34;&#10;&#10;#git config --global --unset user.name &#21462;&#28040;&#20840;&#23616;&#35774;&#32622;&#10;&#10;#git config --global --unset user.email &#21462;&#28040;&#20840;&#23616;&#35774;&#32622;&#10;&#10;#&#22312;&#21516;&#19968;&#26426;&#22120;&#19981;&#21516;&#30446;&#24405;&#19979;&#20811;&#38534;&#36828;&#31243;&#21516;&#19968;&#20010;repo</span><br></pre></td></tr></table></figure></p>
<p>然后执行对应的clone操作就可以了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/user1&#10;&#10;git clone git@chdxy/chdxy:xxx.git   #&#26684;&#24335;  git clone git@Host:&#29992;&#25143;&#21517;/&#20855;&#20307;.git   &#21363;&#25226;&#40664;&#35748;&#30340;github.com &#25913;&#25104; &#8220;Host&#8221;&#10;&#10;cd /home/user2&#10;git clone git@secondgit:User/xxx.git</span><br></pre></td></tr></table></figure>
<p>上面的两条clone命令，虽然关联到同一个repo，却是通过不同ssh连接，当然也是不同的git账号。<br>注意：以上不要设置全局的user 和email 直接设置当前仓库的user 和email即可 （去掉—global，如果已设置加上—unset参数即可）</p>
<p>接下来的各种操作（pull、push、fetch和普通的一样）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[客户端git配置多个github账号]]>
    
    </summary>
    
      <category term="Git" scheme="http://www.rikyliu.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://www.rikyliu.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单的进程启动和关闭Shell脚本制作]]></title>
    <link href="http://www.rikyliu.com/php-fpm-shell/"/>
    <id>http://www.rikyliu.com/php-fpm-shell/</id>
    <published>2015-04-22T14:12:55.000Z</published>
    <updated>2015-04-22T14:29:46.000Z</updated>
    <content type="html"><![CDATA[<p>整个Shell相对简单，重点理解<code>awk</code> ，管道<code>|</code>,以及 <code>xargs kill -9</code> 应该就比较清晰了，<br>整个过程就是一个查询-&gt;筛选-&gt;然后kill-&gt;到在启动的过程，其他服务如Redis,MongoDB,Memecache以及Mysql和Apache都可以用类似的方式来制作简单的Shell脚本。<br>使用相对简单：<code>./php-fpm.sh start</code><br>如果不能放到/bin/bash目录，可以采用软连接<code>ln -s</code>或者别名<code>alias fpm=&#39;/usr/local/bash/php-fpm.sh&#39;</code>的方式来简化命令操作：</p>
<h4 id="别名：">别名：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令行操作即可</span></span><br><span class="line"><span class="comment">#输出到.bashrc</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias phpfpm='/usr/local/bash/php-fpm'"</span>&gt;&gt;~/.bashrc</span><br><span class="line"><span class="comment">#使其生效</span></span><br><span class="line">soure ~/.bashrc</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<p>脚本源码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#从终端接收第一个参数，系统本身默认当前shel为第0个参数$0</span></span><br><span class="line">param=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动进程函数</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">#执行进程查询</span></span><br><span class="line">	<span class="comment">#ps aux  查询所用用户进程</span></span><br><span class="line">	<span class="comment">#grep -i "php-fpm"  查询进程为php-fpm的进程，不区分大小写</span></span><br><span class="line">	<span class="comment">#grep -v grep 移除查询结果中存在grep的进程，即忽略当前查询进程</span></span><br><span class="line">	<span class="comment">#awk '&#123;print $2&#125;' 打印第二列参数</span></span><br><span class="line">    fpms=`ps aux | grep -i <span class="string">"php-fpm"</span> | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"></span><br><span class="line">	<span class="comment">#当前进程不为空  -n ： 字符串不为空</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$fpms</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">		<span class="comment">#启动进程</span></span><br><span class="line">        php-fpm</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"PHP-FPM Start"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"PHP-FPM Already Start"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">#停止进程</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    fpms=`ps aux | grep -i <span class="string">"php-fpm"</span> | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">	<span class="comment">#xargs 将  前面 $fpms 作为kill的参数，执行kill进程操作</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$fpms</span> | xargs <span class="built_in">kill</span> -<span class="number">9</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pid <span class="keyword">in</span> <span class="variable">$fpms</span>; <span class="keyword">do</span></span><br><span class="line">		<span class="comment">#正则匹配非数字</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">echo</span> <span class="variable">$pid</span> | egrep -q <span class="string">'^[0-9]+$'</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"PHP-FPM Pid <span class="variable">$pid</span> Kill"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$pid</span> IS Not A PHP-FPM Pid"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#switch 调用 </span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$param</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">'start'</span>)</span><br><span class="line">        start;;</span><br><span class="line">    <span class="string">'stop'</span>)</span><br><span class="line">        stop;;</span><br><span class="line">    <span class="string">'restart'</span>)</span><br><span class="line">        stop</span><br><span class="line">        start;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage: ./phpfpm.sh start|stop|restart"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[php-fpm.sh 启动脚本制作]]>
    
    </summary>
    
      <category term="php" scheme="http://www.rikyliu.com/tags/php/"/>
    
      <category term="shell" scheme="http://www.rikyliu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP简单类型转换及类型函数判断下的区别]]></title>
    <link href="http://www.rikyliu.com/php-empty-empty-boolval-isset/"/>
    <id>http://www.rikyliu.com/php-empty-empty-boolval-isset/</id>
    <published>2015-04-01T14:58:02.000Z</published>
    <updated>2015-04-01T22:44:13.000Z</updated>
    <content type="html"><![CDATA[<p>公司后端用Java重构后已经有几个月没写过PHP了，虽然PHP不是很出色的语言，但也是我进入工作后的第一语言，我也没打算放弃它。前那两天看到一个关于类型判断的帖子，觉得挺有趣的，虽然不复杂，却也挺考验PHP基础的功底的。</p>
<p>函数 <em><code>gettype(), empty(), is_null(), isset(), boolval()</code></em> 这几个在获取参数判断类型上常用的方法，感觉还是特别容易出错的，因此我在自己测试了之后总结如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>gettype()</th>
<th>empty()</th>
<th>is_null()</th>
<th>isset()</th>
<th>boolval()</th>
</tr>
</thead>
<tbody>
<tr>
<td>$val=””;</td>
<td>String</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$val=null;</td>
<td>NULL</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>var $val</td>
<td>NULL</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>$val=array()</td>
<td>Array</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$val=false;</td>
<td>boolean</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=1</td>
<td>int</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=0</td>
<td>int</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=-1</td>
<td>int</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=”9”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=”0”</td>
<td>string</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=”hello”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$val=”ture”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$val=”false”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<p>以上是正确的格式对照表。<br><a id="more"></a></p>
<h5 id="我自己在测试的过程中也出现了一些疑问：">我自己在测试的过程中也出现了一些疑问：</h5><ol>
<li><p>bool值false在判断是否为空时，显示为空</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="keyword">false</span>; </span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool（true）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数字0在判断为空是，显示为true</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="number">0</span>;</span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool(true）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串0在判断为空是，显示为true</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="string">"0"</span>;</span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool(true）</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更重要的是<code>$val=&quot;&quot;;</code>和<code>$val=&quot;0&quot;;</code>的判断的结果是一样的，这些我可以通过PHP的弱类型自动转换来解释，但之后我做了一个简单的实验，一时无法让我开窍了：<br><img src="http://7xi3xm.com1.z0.glb.clouddn.com/php.jpg" alt="php代码"><br>按图上的推理逻辑，<code>&#39;&#39;</code>那就应该是等于<code>&#39;0&#39;</code>了，这难道是我自己钻了牛角尖么？<br>答案是确实是自己走进了死胡同，PHP在不同类型做比较的时候会进行转换，但相同类型则没有转换成false的问题，因此就出现了这种让自己觉得可笑的事情。</p>
]]></content>
    <summary type="html">
    <![CDATA[PHP简单类型转换及类型函数gettype(), empty(), is_null(), isset(), boolval()的区别]]>
    
    </summary>
    
      <category term="PHP" scheme="http://www.rikyliu.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyBatis动态SQL优化方案之@UpdateProvider]]></title>
    <link href="http://www.rikyliu.com/java-mybatis/"/>
    <id>http://www.rikyliu.com/java-mybatis/</id>
    <published>2015-03-30T22:09:31.000Z</published>
    <updated>2015-03-30T22:41:19.000Z</updated>
    <content type="html"><![CDATA[<p>   最近开始学习纯注解形式的MyBatis，我很是喜爱（从动态的PHP转到Java对配置XML这种配置的从个人感情上很是厌恶,不喜勿喷哈），网上也有不少教程，但普遍性的就都是<code>@Select</code>、<code>@Update</code>、<code>@Delete</code>以及<code>@SelectKey</code>的一些简单的用法的介绍。</p>
<p>   当然这些以满足了简单的SQL逻辑。但是当遇到多个简单的更新不同的字段的时候，便显得显得冗余了。一般的解决的办法是，不断重载一个更新方法，更新简单的字段。还有更甚的是一次更新全部字段。其实如果用Xml配置的话，是有相关的语法通过判断字段是否为空来判断是否需要更新的。<br>类似：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;select id="findByPage" parameterType="com.user.util.PageUtil" resultType="com.user.dao.UserDaoImpl" &gt;</span><br><span class="line">		select * from user where 1 = 1 </span><br><span class="line">		&lt;if email="email!= "" || email!= null"&gt;</span><br><span class="line">			    and ename = #&#123;user.email&#125;</span><br><span class="line">		&lt;/if&gt;</span><br><span class="line">		...</span><br></pre></td></tr></table></figure></p>
<p>其实注解形式通过<code>@UpdateProvider</code>也是能够解决这个问题的。<br><a id="more"></a><br>当使用Mapper时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Select</span>(<span class="string">"SELECT * FROM user WHERE user_id = #&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@UpdateProvider</span>(type = UserSql.class, method = <span class="string">"update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立对应的UserSql.java文件：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSql</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="keyword">final</span> User user)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">			&#123;</span><br><span class="line">				UPDATE(<span class="string">"user"</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//通过条件 判断是否需要更新该字段</span></span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getName()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;name&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getNickName()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;nickName&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getEmail()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;email&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				...</span><br><span class="line">				</span><br><span class="line">				WHERE(<span class="string">"id = #&#123;id&#125;"</span>)</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样基本上就实现了通过对字段的判断实现动态的拼接了。</p>
]]></content>
    <summary type="html">
    <![CDATA[MyBatis动态SQL优化方案之@UpdateProvider]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.rikyliu.com/tags/Java/"/>
    
      <category term="MyBatis" scheme="http://www.rikyliu.com/tags/MyBatis/"/>
    
      <category term="UpdateProvider" scheme="http://www.rikyliu.com/tags/UpdateProvider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Hexo搭建博客]]></title>
    <link href="http://www.rikyliu.com/hexo/"/>
    <id>http://www.rikyliu.com/hexo/</id>
    <published>2015-03-25T22:33:49.000Z</published>
    <updated>2015-03-26T23:13:08.000Z</updated>
    <content type="html"><![CDATA[<p>告别wordpress之后，我一直在寻找代替品，试过复杂的Jetty，也试过其他基于LAMP的CMS，最终选择了Hexo，安装也不算复杂：</p>
<ol>
<li><p>安装Node.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node  <span class="comment">#OS X 环境</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后就可以在本地初始化博客了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment">#此间会提示你npm install </span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件_config.yml 配置站点信息,这个比较简单</p>
<a id="more"></a></li>
<li><p>生成新的文章</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"标题"</span> <span class="comment">#会在source/_post 下生成对应的md文件，采用markdown编辑器编辑即可</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后生成静态化站点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要发布的Github上，先在配置文件中配置好Github信息，这里需要现在github账号下创建项目blog（注意不要创建README）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">      <span class="built_in">type</span>: github <span class="comment">#3.0之后 为git</span></span><br><span class="line">      repository: https://github.com/lxy3372/blog.git</span><br><span class="line">      branch: gh-pages</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意项（爬坑）</p>
</li>
</ol>
<h5 id="安装插件">安装插件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装 RSS 和 sitemap相关插件</span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment">#save不能丢，否则一直不会生效</span></span><br></pre></td></tr></table></figure>
<h5 id="Github相关CNAME">Github相关CNAME</h5><p>如果直接在github上创建该文件，每次发布时，这个文件都会被覆盖掉，解决办法是在source下建立CNAME文件，每次发布都会push上去。</p>
<h5 id="添加站内搜索">添加站内搜索</h5><p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索</a>  该博客已经成功添加，但我按照此方法实现搜索时，在搜索页遇到部分JS问题，无法异步加载数据到Search页面。</p>
<hr>
<p>杂记：<br>   在折腾期间也遇到了一些问题，比如编辑_config.yml的时候，如果用vim编辑的话，在启动server的时候会出现格式错误的问题，而直接用文本编辑则不会出现这种问题，这可能跟我vim的配置有些关系。该文也是我参考了其他朋友的文章，按自己搭建的顺序写的，也算是重复造轮子了，不过当Markdown练练手也是不错的。</p>
]]></content>
    <summary type="html">
    <![CDATA[Hexo使用心得]]>
    
    </summary>
    
      <category term="blog" scheme="http://www.rikyliu.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://www.rikyliu.com/tags/hexo/"/>
    
      <category term="mac" scheme="http://www.rikyliu.com/tags/mac/"/>
    
      <category term="蜕变" scheme="http://www.rikyliu.com/tags/%E8%9C%95%E5%8F%98/"/>
    
  </entry>
  
</feed>