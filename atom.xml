<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Riky]]></title>
  <subtitle><![CDATA[Keep it simple.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.rikyliu.com/"/>
  <updated>2015-04-01T22:44:13.000Z</updated>
  <id>http://www.rikyliu.com/</id>
  
  <author>
    <name><![CDATA[Riky Liu]]></name>
    <email><![CDATA[me@rikyliu.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PHP简单类型转换及类型函数判断下的区别]]></title>
    <link href="http://www.rikyliu.com/php-empty-empty-boolval-isset/"/>
    <id>http://www.rikyliu.com/php-empty-empty-boolval-isset/</id>
    <published>2015-04-01T14:58:02.000Z</published>
    <updated>2015-04-01T22:44:13.000Z</updated>
    <content type="html"><![CDATA[<p>公司后端用Java重构后已经有几个月没写过PHP了，虽然PHP不是很出色的语言，但也是我进入工作后的第一语言，我也没打算放弃它。前那两天看到一个关于类型判断的帖子，觉得挺有趣的，虽然不复杂，却也挺考验PHP基础的功底的。</p>
<p>函数 <em><code>gettype(), empty(), is_null(), isset(), boolval()</code></em> 这几个在获取参数判断类型上常用的方法，感觉还是特别容易出错的，因此我在自己测试了之后总结如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>gettype()</th>
<th>empty()</th>
<th>is_null()</th>
<th>isset()</th>
<th>boolval()</th>
</tr>
</thead>
<tbody>
<tr>
<td>$val=””;</td>
<td>String</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$val=null;</td>
<td>NULL</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>var $val</td>
<td>NULL</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
</tr>
<tr>
<td>$val=array()</td>
<td>Array</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$val=false;</td>
<td>boolean</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=1</td>
<td>int</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=0</td>
<td>int</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=-1</td>
<td>int</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=”9”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$var=”0”</td>
<td>string</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
</tr>
<tr>
<td>$var=”hello”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$val=”ture”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
<tr>
<td>$val=”false”</td>
<td>string</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
</tr>
</tbody>
</table>
<p>以上是正确的格式对照表。<br><a id="more"></a></p>
<h5 id="我自己在测试的过程中也出现了一些疑问：">我自己在测试的过程中也出现了一些疑问：</h5><ol>
<li><p>bool值false在判断是否为空时，显示为空</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="keyword">false</span>; </span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool（true）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数字0在判断为空是，显示为true</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="number">0</span>;</span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool(true）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串0在判断为空是，显示为true</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$val</span>=<span class="string">"0"</span>;</span><br><span class="line">var_dump(<span class="keyword">empty</span>(<span class="variable">$val</span>));</span><br><span class="line"><span class="comment">#print bool(true）</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更重要的是<code>$val=&quot;&quot;;</code>和<code>$val=&quot;0&quot;;</code>的判断的结果是一样的，这些我可以通过PHP的弱类型自动转换来解释，但之后我做了一个简单的实验，一时无法让我开窍了：<br><img src="http://7xi3xm.com1.z0.glb.clouddn.com/php.jpg" alt="php代码"><br>按图上的推理逻辑，<code>&#39;&#39;</code>那就应该是等于<code>&#39;0&#39;</code>了，这难道是我自己钻了牛角尖么？<br>答案是确实是自己走进了死胡同，PHP在不同类型做比较的时候会进行转换，但相同类型则没有转换成false的问题，因此就出现了这种让自己觉得可笑的事情。</p>
]]></content>
    <summary type="html">
    <![CDATA[PHP简单类型转换及类型函数gettype(), empty(), is_null(), isset(), boolval()的区别]]>
    
    </summary>
    
      <category term="PHP" scheme="http://www.rikyliu.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MyBatis动态SQL优化方案之@UpdateProvider]]></title>
    <link href="http://www.rikyliu.com/java-mybatis/"/>
    <id>http://www.rikyliu.com/java-mybatis/</id>
    <published>2015-03-30T22:09:31.000Z</published>
    <updated>2015-03-30T22:41:19.000Z</updated>
    <content type="html"><![CDATA[<p>   最近开始学习纯注解形式的MyBatis，我很是喜爱（从动态的PHP转到Java对配置XML这种配置的从个人感情上很是厌恶,不喜勿喷哈），网上也有不少教程，但普遍性的就都是<code>@Select</code>、<code>@Update</code>、<code>@Delete</code>以及<code>@SelectKey</code>的一些简单的用法的介绍。</p>
<p>   当然这些以满足了简单的SQL逻辑。但是当遇到多个简单的更新不同的字段的时候，便显得显得冗余了。一般的解决的办法是，不断重载一个更新方法，更新简单的字段。还有更甚的是一次更新全部字段。其实如果用Xml配置的话，是有相关的语法通过判断字段是否为空来判断是否需要更新的。<br>类似：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;select id="findByPage" parameterType="com.user.util.PageUtil" resultType="com.user.dao.UserDaoImpl" &gt;</span><br><span class="line">		select * from user where 1 = 1 </span><br><span class="line">		&lt;if email="email!= "" || email!= null"&gt;</span><br><span class="line">			    and ename = #&#123;user.email&#125;</span><br><span class="line">		&lt;/if&gt;</span><br><span class="line">		...</span><br></pre></td></tr></table></figure></p>
<p>其实注解形式通过<code>@UpdateProvider</code>也是能够解决这个问题的。<br><a id="more"></a><br>当使用Mapper时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Select</span>(<span class="string">"SELECT * FROM user WHERE user_id = #&#123;id&#125;"</span>)</span><br><span class="line">	<span class="function">User <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@UpdateProvider</span>(type = UserSql.class, method = <span class="string">"update"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立对应的UserSql.java文件：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSql</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="keyword">final</span> User user)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">			&#123;</span><br><span class="line">				UPDATE(<span class="string">"user"</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//通过条件 判断是否需要更新该字段</span></span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getName()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;name&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getNickName()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;nickName&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.isNotBlank(user.getEmail()))&#123;</span><br><span class="line">					SET(<span class="string">"name = #&#123;email&#125;"</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				...</span><br><span class="line">				</span><br><span class="line">				WHERE(<span class="string">"id = #&#123;id&#125;"</span>)</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样基本上就实现了通过对字段的判断实现动态的拼接了。</p>
]]></content>
    <summary type="html">
    <![CDATA[MyBatis动态SQL优化方案之@UpdateProvider]]>
    
    </summary>
    
      <category term="Java" scheme="http://www.rikyliu.com/tags/Java/"/>
    
      <category term="MyBatis" scheme="http://www.rikyliu.com/tags/MyBatis/"/>
    
      <category term="UpdateProvider" scheme="http://www.rikyliu.com/tags/UpdateProvider/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Hexo搭建博客]]></title>
    <link href="http://www.rikyliu.com/hexo/"/>
    <id>http://www.rikyliu.com/hexo/</id>
    <published>2015-03-25T22:33:49.000Z</published>
    <updated>2015-03-26T23:13:08.000Z</updated>
    <content type="html"><![CDATA[<p>告别wordpress之后，我一直在寻找代替品，试过复杂的Jetty，也试过其他基于LAMP的CMS，最终选择了Hexo，安装也不算复杂：</p>
<ol>
<li><p>安装Node.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node  <span class="comment">#OS X 环境</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Hexo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后就可以在本地初始化博客了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment">#此间会提示你npm install </span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件_config.yml 配置站点信息,这个比较简单</p>
<a id="more"></a></li>
<li><p>生成新的文章</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"标题"</span> <span class="comment">#会在source/_post 下生成对应的md文件，采用markdown编辑器编辑即可</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后生成静态化站点</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要发布的Github上，先在配置文件中配置好Github信息，这里需要现在github账号下创建项目blog（注意不要创建README）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">      <span class="built_in">type</span>: github <span class="comment">#3.0之后 为git</span></span><br><span class="line">      repository: https://github.com/lxy3372/blog.git</span><br><span class="line">      branch: gh-pages</span><br></pre></td></tr></table></figure>
</li>
<li><p>发布</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意项（爬坑）</p>
</li>
</ol>
<h5 id="安装插件">安装插件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装 RSS 和 sitemap相关插件</span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment">#save不能丢，否则一直不会生效</span></span><br></pre></td></tr></table></figure>
<h5 id="Github相关CNAME">Github相关CNAME</h5><p>如果直接在github上创建该文件，每次发布时，这个文件都会被覆盖掉，解决办法是在source下建立CNAME文件，每次发布都会push上去。</p>
<h5 id="添加站内搜索">添加站内搜索</h5><p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索</a>  该博客已经成功添加，但我按照此方法实现搜索时，在搜索页遇到部分JS问题，无法异步加载数据到Search页面。</p>
<hr>
<p>杂记：<br>   在折腾期间也遇到了一些问题，比如编辑_config.yml的时候，如果用vim编辑的话，在启动server的时候会出现格式错误的问题，而直接用文本编辑则不会出现这种问题，这可能跟我vim的配置有些关系。该文也是我参考了其他朋友的文章，按自己搭建的顺序写的，也算是重复造轮子了，不过当Markdown练练手也是不错的。</p>
]]></content>
    <summary type="html">
    <![CDATA[Hexo使用心得]]>
    
    </summary>
    
      <category term="blog" scheme="http://www.rikyliu.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://www.rikyliu.com/tags/hexo/"/>
    
      <category term="mac" scheme="http://www.rikyliu.com/tags/mac/"/>
    
      <category term="蜕变" scheme="http://www.rikyliu.com/tags/%E8%9C%95%E5%8F%98/"/>
    
  </entry>
  
</feed>